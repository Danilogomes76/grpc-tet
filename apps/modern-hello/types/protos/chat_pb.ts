// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file chat.proto (package chat, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chat.MessageRequest
 */
export class MessageRequest extends Message<MessageRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string threadId = 3;
   */
  threadId = "";

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  constructor(data?: PartialMessage<MessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.MessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "threadId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequest {
    return new MessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequest | PlainMessage<MessageRequest> | undefined, b: MessageRequest | PlainMessage<MessageRequest> | undefined): boolean {
    return proto3.util.equals(MessageRequest, a, b);
  }
}

/**
 * @generated from message chat.MessageResponse
 */
export class MessageResponse extends Message<MessageResponse> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  constructor(data?: PartialMessage<MessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.MessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageResponse {
    return new MessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessageResponse | PlainMessage<MessageResponse> | undefined, b: MessageResponse | PlainMessage<MessageResponse> | undefined): boolean {
    return proto3.util.equals(MessageResponse, a, b);
  }
}

